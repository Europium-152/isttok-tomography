"""
Export the real projection matrix
"""
from __future__ import print_function

import numpy as np
from scipy.interpolate import interp2d, griddata, CloughTocher2DInterpolator
from scipy.integrate import dblquad
import matplotlib.pyplot as plt
import globalParameters as gp


coordinates_files = [
    "top-coordinates-sensor-1.npy",
    "top-coordinates-sensor-2.npy",
    "top-coordinates-sensor-3.npy",
    "top-coordinates-sensor-4.npy",
    "top-coordinates-sensor-5.npy",
    "top-coordinates-sensor-6.npy",
    "top-coordinates-sensor-7.npy",
    "top-coordinates-sensor-8.npy",
    "top-coordinates-sensor-9.npy",
    "top-coordinates-sensor-10.npy",
    "top-coordinates-sensor-11.npy",
    "top-coordinates-sensor-12.npy",
    "top-coordinates-sensor-13.npy",
    "top-coordinates-sensor-14.npy",
    "top-coordinates-sensor-15.npy",
    "top-coordinates-sensor-16.npy",

    "out-coordinates-sensor-1.npy",
    "out-coordinates-sensor-2.npy",
    "out-coordinates-sensor-3.npy",
    "out-coordinates-sensor-4.npy",
    "out-coordinates-sensor-5.npy",
    "out-coordinates-sensor-6.npy",
    "out-coordinates-sensor-7.npy",
    "out-coordinates-sensor-8.npy",
    "out-coordinates-sensor-9.npy",
    "out-coordinates-sensor-10.npy",
    "out-coordinates-sensor-11.npy",
    "out-coordinates-sensor-12.npy",
    "out-coordinates-sensor-13.npy",
    "out-coordinates-sensor-14.npy",
    "out-coordinates-sensor-15.npy",
    "out-coordinates-sensor-16.npy",

    "bot-coordinates-sensor-1.npy",
    "bot-coordinates-sensor-2.npy",
    "bot-coordinates-sensor-3.npy",
    "bot-coordinates-sensor-4.npy",
    "bot-coordinates-sensor-5.npy",
    "bot-coordinates-sensor-6.npy",
    "bot-coordinates-sensor-7.npy",
    "bot-coordinates-sensor-8.npy",
    "bot-coordinates-sensor-9.npy",
    "bot-coordinates-sensor-10.npy",
    "bot-coordinates-sensor-11.npy",
    "bot-coordinates-sensor-12.npy",
    "bot-coordinates-sensor-13.npy",
    "bot-coordinates-sensor-14.npy",
    "bot-coordinates-sensor-15.npy",
    "bot-coordinates-sensor-16.npy",
]

solid_angle_files = [
    # Top sensor first 8
    "solid-angle-top-and-out-sensors-1-and-16.npy",
    "solid-angle-top-and-out-sensors-2-and-15.npy",
    "solid-angle-top-and-out-sensors-3-and-14.npy",
    "solid-angle-top-and-out-sensors-4-and-13.npy",
    "solid-angle-top-and-out-sensors-5-and-12.npy",
    "solid-angle-top-and-out-sensors-6-and-11.npy",
    "solid-angle-top-and-out-sensors-7-and-10.npy",
    "solid-angle-top-and-out-sensors-8-and-9.npy",

    # Top sensor last 8
    "solid-angle-top-and-out-sensors-8-and-9.npy",
    "solid-angle-top-and-out-sensors-7-and-10.npy",
    "solid-angle-top-and-out-sensors-6-and-11.npy",
    "solid-angle-top-and-out-sensors-5-and-12.npy",
    "solid-angle-top-and-out-sensors-4-and-13.npy",
    "solid-angle-top-and-out-sensors-3-and-14.npy",
    "solid-angle-top-and-out-sensors-2-and-15.npy",
    "solid-angle-top-and-out-sensors-1-and-16.npy",

    # Outer sensor first 8
    "solid-angle-top-and-out-sensors-1-and-16.npy",
    "solid-angle-top-and-out-sensors-2-and-15.npy",
    "solid-angle-top-and-out-sensors-3-and-14.npy",
    "solid-angle-top-and-out-sensors-4-and-13.npy",
    "solid-angle-top-and-out-sensors-5-and-12.npy",
    "solid-angle-top-and-out-sensors-6-and-11.npy",
    "solid-angle-top-and-out-sensors-7-and-10.npy",
    "solid-angle-top-and-out-sensors-8-and-9.npy",

    # Outer sensor last 8
    "solid-angle-top-and-out-sensors-8-and-9.npy",
    "solid-angle-top-and-out-sensors-7-and-10.npy",
    "solid-angle-top-and-out-sensors-6-and-11.npy",
    "solid-angle-top-and-out-sensors-5-and-12.npy",
    "solid-angle-top-and-out-sensors-4-and-13.npy",
    "solid-angle-top-and-out-sensors-3-and-14.npy",
    "solid-angle-top-and-out-sensors-2-and-15.npy",
    "solid-angle-top-and-out-sensors-1-and-16.npy",

    # Bottom sensor first 8
    "solid-angle-bot-sensors-1-and-16.npy",
    "solid-angle-bot-sensors-2-and-15.npy",
    "solid-angle-bot-sensors-3-and-14.npy",
    "solid-angle-bot-sensors-4-and-13.npy",
    "solid-angle-bot-sensors-5-and-12.npy",
    "solid-angle-bot-sensors-6-and-11.npy",
    "solid-angle-bot-sensors-7-and-10.npy",
    "solid-angle-bot-sensors-8-and-9.npy",

    # Bottom sensor last 8
    "solid-angle-bot-sensors-8-and-9.npy",
    "solid-angle-bot-sensors-7-and-10.npy",
    "solid-angle-bot-sensors-6-and-11.npy",
    "solid-angle-bot-sensors-5-and-12.npy",
    "solid-angle-bot-sensors-4-and-13.npy",
    "solid-angle-bot-sensors-3-and-14.npy",
    "solid-angle-bot-sensors-2-and-15.npy",
    "solid-angle-bot-sensors-1-and-16.npy",

]

sensors = np.arange(48)
# sensors = [32]

# resolution = "0mm5"  # 0.5 millimeter resolution
resolution = "1mm0"  # 1.0 millimeter resolution

solid_angles_dir = "D:/uni/tomography-calibration/solid-angles-values-res-" + resolution + "/"
projection_functions_dir = "D:/uni/tomography-calibration/real-projection-functions-" + resolution + "/"
projection_matrices_dir = "D:/uni/tomography-calibration/projections/"

all_projections = []

for sensor_number in sensors:

    try:
        projection_function = np.load(projection_functions_dir + "sensor%d.npy" % sensor_number, fix_imports=True, encoding='latin1')[()]
        print("Found interpolation function for sensor %d" % sensor_number)

    except IOError:

        print("Interpolation function for sensor %d not found" % sensor_number)
        # Solid angle values
        sangles = np.load(solid_angles_dir + solid_angle_files[sensor_number])
        # Corresponding coordinates
        coords = np.load(solid_angles_dir + coordinates_files[sensor_number])
        # Resize sangles because it has a mistake
        sangles = sangles[0:len(coords)]

        # The solid angle are not stored in any particular order
        # and are only calculated for non-zero values
        # We need to order them properly and also sum them along ZZ

        # proj_values = []  # Ordered solid angle values summed along zz
        # summed_proj = []  # Summed along yy (line approximation)

        # Rounding coordinates to um
        coords = np.round(coords * 1000)

        x_coord = []
        y_coord = []
        proj_values = []

        i = 0
        while i < len(coords):
            x_coord.append(coords[i, 0])
            y_coord.append(coords[i, 1])
            proj_values.append(0.0)
            while (i < len(coords)) and (coords[i, 0] == x_coord[-1]) and (coords[i, 1] == y_coord[-1]):
                proj_values[-1] += sangles[i]
                i += 1

        # Generate data on a grid -------------------------------------------------------



        # summed_proj = np.array(proj_values)
        #
        # summed_proj = summed_proj.T
        # for column in summed_proj:
        #     column[np.argmax(column)] = np.sum(column)
        #     # print(np.sum(column))
        # summed_proj = summed_proj.T
        #
        # plt.figure()
        # plt.pcolormesh(plot_gridx, plot_gridy, np.array(proj_values), cmap="hot")
        # plt.colorbar()
        # plt.show()
        #
        # plt.figure()
        # plt.pcolormesh(plot_gridx, plot_gridy, summed_proj)
        # plt.colorbar()
        # plt.show()

        # Interpolation class with projection function
        # projection_function = interpolate(np.array(x_coord)*0.001, np.array(y_coord)*0.001, np.array(proj_values)*2., fill_value=0.0)
        projection_function = CloughTocher2DInterpolator(0.001 * np.array([[xx, yy] for xx, yy in zip(x_coord, y_coord)]),
                                                         values=2*np.array(proj_values),
                                                         fill_value=0.0)
        np.save(projection_functions_dir + "sensor%d.npy" % sensor_number, projection_function)

    n_rows = 100  # y-axis pixel resolution
    n_cols = 100  # x-axis pixel resolution

    x_min = -100.
    x_max = +100.

    y_min = -100.
    y_max = +100.

    x_grid = np.linspace(x_min, x_max, num=n_cols)
    y_grid = np.linspace(y_max, y_min, num=n_rows)

    res_x = x_grid[1] - x_grid[0]
    res_y = y_grid[0] - y_grid[1]

    projections = []

    # for y in y_grid:
    #     projections.append([])
    #     for x in x_grid:
    #         projections[-1].append(projection_function(x, y))
    #         # TODO: Use average value inside the grid instead of value at the center

    for y in y_grid:
        projections.append([])
        y_sub = np.linspace(y - 0.5 * res_y, y + 0.5 * res_y, 3)
        for x in x_grid:
            x_sub = np.linspace(x - 0.5 * res_x, x + 0.5 * res_x, 3)
            integral = 0.
            for yy in y_sub:
                for xx in x_sub:
                    integral += projection_function(xx, yy)
            integral /= float(len(y_sub) * len(x_sub))
            projections[-1].append(integral)

    # for y in y_grid:
    #     projections.append([])
    #     for x in x_grid:
    #         value = dblquad(projection_function,
    #                         y - 0.5 * res_y,
    #                         y + 0.5 * res_y,
    #                         lambda _: x - 0.5 * res_x,
    #                         lambda _: x + 0.5 * res_x)[0]
    #         projections[-1].append(value)

    # plt.figure()
    # plt.imshow(projections, vmin=0., vmax=0.002)
    # plt.colorbar()

    all_projections.append(projections)
#
all_projections = np.array(all_projections)
all_projections[all_projections < 0] = 0
np.save("projections/complex-view-cone-100.npy", [{'x': x_grid, 'y': y_grid,
                                                 'projections': all_projections}])
